module Sortsmith
    interface _Sortable
    def to_s: () -> String
    def <=>: (self) -> Integer
  end

  class Sorter[Elem < _Sortable]
    @enumerable: Enumerable[Elem]

    @pipeline: Array[Step]

    @direction: Symbol

    #
    # Creates a Sorter builder instance
    #
    # @param enumerable [Enumerable] The enumerable (Array, Hash) to sort
    #
    def initialize: (Enumerable[Elem] enumerable) -> void

    #
    # Finalizes the Sorter instance and sorts the enumerable
    #
    # @return [Enumerable] The sorted enumerable
    #
    def sort: () -> Enumerable[Elem]

    #
    # Adds a "filter" step to the sort pipeline.
    # Filter steps are used to get data from the current item being sorted
    # These are performed before transformation steps
    #
    # @param & [Proc] The block to execute
    #
    # @return [Self] The sorter instance
    #
    def add_filter: () { (untyped) -> untyped } -> self

    #
    # Adds a "transformation" step to the sort pipeline
    # Transformation steps are used to transform data.
    # These are performed after filter steps
    #
    # @param & [Proc] The block to execute
    #
    # @return [Self] The sorter instance
    #
    def add_transformation: () { (untyped) -> untyped } -> self

    #
    # Instructs the sorter to perform a fetch by key on the Hash being sorted
    #
    # @param key [String, Symbol, Any] The hash key to fetch
    #
    # @return [Self] The sorter instance
    #
    def by_key: ((String | Symbol | untyped) key) -> self

    #
    # Instructs the sorter to perform a method call on the object being sorted
    #
    # @param method [String, Symbol] The method name to call
    #
    # @return [Self] The sorter instance
    #
    def by_method: ((String | Symbol) method) -> self

    alias by_attribute by_method

    #
    # Instructs the sorter to sort by a case insensitive value
    #
    # @return [Self] The sorter instance
    #
    def case_insensitive: () -> self

    #
    # Controls which direction the array will be sorted
    #
    # @return [Self] The sorter instance
    #
    def asc: () -> self

    alias forward asc

    #
    # Controls which direction the array will be sorted
    #
    # @return [Self] The sorter instance
    #
    def desc: () -> self

    alias reverse desc

    private

    def add_step: (type: Symbol) { (untyped) -> untyped } -> self

    def select_filter_steps: () -> Array[Step]

    def select_transformation_steps: () -> Array[Step]

    def type_priority: (untyped value) -> Integer

    def apply_transformations: (Array[Step] steps, untyped value) -> untyped
  end
end
